from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from gpt import *
from util import *


async def start(update, context):
    dialog.mode = "main"
    text = load_message("main")
    await send_photo(update, context, "main")
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        "/start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "/profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé",
        "/opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
        "/message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
        "/date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
        "/gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†"
    })


async def gpt(update, context):
    dialog.mode = "gpt"
    text = load_message("gpt")
    await send_photo(update, context, "gpt")
    await send_text(update, context, text)


async def date(update, context):
    dialog.mode = "date"
    text = load_message("date")
    await send_photo(update, context, "date")
    await send_text_buttons(update, context, text, {
        "dateGrande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
        "dateRobbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
        "dateZendaya": "–ó–µ–Ω–¥–µ—è",
        "dateGosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
        "dateHardy": "–¢–æ–º –•–∞—Ä–¥–∏"
    })


async def date_dialog(update, context):
    text = update.message.text
    my_message = await send_text(update, context, "–î–µ–≤—É—à–∫–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...")
    answer = await chatgpt.add_message(text)
    await my_message.edit_text(answer)


async def date_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    await send_photo(update, context, query)
    await send_text(update, context, "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –≤–∞—à—É –¥–µ–≤—É—à–∫—É (–ø–∞—Ä–Ω—è) –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π")

    prompt = load_prompt(query)
    chatgpt.set_prompt(prompt)


async def gpt_dialog(update, context):
    text = update.message.text
    prompt = load_prompt("gpt")
    answer = await chatgpt.send_question(prompt, text)
    await send_text(update, context, answer)


async def message(update, context):
    dialog.mode = "message"
    text = load_message("message")
    await send_photo(update, context, "message")
    await send_text_buttons(update, context, text, {
        "message_next": "–°–ª–µ–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ"
    })
    dialog.list.clear()


async def message_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    prompt = load_prompt(query)
    user_chat_history = "\n\n".join(dialog.list)
    my_message = await send_text(update,context, "ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...")
    answer = await chatgpt.send_question(prompt, user_chat_history)
    await send_text(update, context, answer)
    await my_message.edit_text(answer)

async def message_dialog(update, context):
    text = update.message.text
    dialog.list.append(text)

async def profile(update, context):
    dialog.mode = "profile"
    text = load_message("profile")
    await send_photo(update, context, "profile")
    await send_text(update, context, text)
    await send_text(update, context, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    dialog.user.clear()
    dialog.count = 0


async def profile_dialog(update, context):
    text = update.message.text
    dialog.count += 1
    if dialog.count == 1:
        dialog.user["age"] = text
        await send_text(update, context, "–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
    elif dialog.count == 2:
        dialog.user["job"] = text
        await send_text(update, context, "–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?")
    elif dialog.count == 3:
        dialog.user["hobbies"] = text
        await send_text(update, context, "–ß—Ç–æ –≤–∞–º –ù–ï –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?")
    elif dialog.count == 4:
        dialog.user["annoys"] = text
        await send_text(update, context, "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
    elif dialog.count == 5:
        dialog.user["goal"] = text
        prompt = load_prompt("profile")
        user_info = dialog_user_info_to_str(dialog.user)
        my_message = send_text(update, context, "ChatGPT –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
        answer = await chatgpt.send_question(prompt, user_info)
        await send_text(update, context, answer)
        my_message.edit_text(answer)

async def opener(update, context):
    dialog.mode = "opener"
    text = load_message("opener")
    await send_photo(update, context, "opener")
    await send_text(update, context, text)
    await send_text(update, context, "–ò–º—è –¥–µ–≤—É—à–∫–∏?")
    dialog.user.clear()
    dialog.count = 0

async def opener_dialog(update, context):
    text = update.message.text
    dialog.count += 1

    if dialog.count == 1:
        dialog.user["name"] = text
        await send_text(update, context, "–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?")
    elif dialog.count == 2:
        dialog.user["age"] = text
        await send_text(update, context, "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± –µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, —É–≤–ª–µ—á–µ–Ω–∏—è—Ö?")
    elif dialog.count == 3:
        dialog.user["interests"] = text
        await send_text(update, context, "–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?")
    elif dialog.count == 4:
        dialog.user["job"] = text
        await send_text(update, context, "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
    elif dialog.count == 5:
        dialog.user["goal"] = text
        prompt = load_prompt("opener")
        user_info = dialog_user_info_to_str(dialog.user)
        my_message = send_text(update, context, "ChatGPT –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        answer = await chatgpt.send_question(prompt, user_info)
        await send_text(update, context, answer)

async def hello(update, context):
    if dialog.mode == "gpt":
        await gpt_dialog(update, context)
    if dialog.mode == "date":
        await date_dialog(update, context)
    if dialog.mode == "message":
        await message_dialog(update, context)
    if dialog.mode == "profile":
        await profile_dialog(update, context)
    if dialog.mode == "opener":
        await opener_dialog(update, context)
    else:
        await send_text(update, context, "–ü—Ä–∏–≤–µ—Ç!")
        await send_text(update, context, "–ö–∞–∫ –¥–µ–ª–∞?")
        await send_text(update, context, "–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ " + update.message.text)

        # await send_photo(update, context, "avatar_main")
        await send_text_buttons(update, context, "–ó–∞–ø—É—Å–∫?", {
            "start": "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
            "stop": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
        })


async def hello_button(update, context):
    query = update.callback_query.data
    if query == "start":
        await send_text(update, context, "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω")
    else:
        await send_text(update, context, "–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


dialog = Dialog()
dialog.mode = None
dialog.list = []
dialog.count = 0
dialog.user = {}

chatgpt = ChatGptService(token = 'gpt:1EprHW2fyrbq2MNxmQbRJFkblB3TJuC8zKn6VeGdT0tnEKbw')

app = ApplicationBuilder().token("6213186484:AAGZR3UvLa0Gy1xruQFJElar4YZ3e-Fnx8k").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("date", date))
app.add_handler(CommandHandler("messsage", message))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("opener", opener))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))
app.add_handler(CallbackQueryHandler(date_button, pattern="^date.*"))
app.add_handler(CallbackQueryHandler(message_button, pattern="^message_.*"))
app.add_handler(CallbackQueryHandler(hello_button))

app.run_polling()
